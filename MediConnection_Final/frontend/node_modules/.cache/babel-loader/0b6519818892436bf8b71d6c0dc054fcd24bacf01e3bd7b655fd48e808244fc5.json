{"ast":null,"code":"var _jsxFileName = \"/Users/desmondoforiatta/Desktop/Medico/frontend/src/containers/users/user/index.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport UserListView from \"./views/listView\";\nimport UserDetailView from \"./views/detailView\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function User(props) {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState({});\n\n  // Initialize user by fetching information from server.\n  useEffect(() => {\n    const {\n      username\n    } = props;\n    async function initialize() {\n      try {\n        setIsLoading(true);\n        const response = await axios.get(`http://localhost:4090/api/users/${username}`, {\n          headers: {\n            'Authorization': `Bearer ${props.session.authToken}`\n          }\n        });\n        // console.log(\"Res back\", response);\n        let data = response.data;\n        if (response.status !== 200) {\n          throw new Error(data.message);\n        }\n        setUser(data);\n      } catch (err) {\n        console.error(`Failed to get user information- ${props.username}. ${err}`);\n      } finally {\n        setTimeout(() => {\n          setIsLoading(false);\n        }, 1000);\n      }\n    }\n    initialize();\n  }, [props.username, props.session.authToken]);\n\n  // Now render view.\n  if (props.listView) {\n    return /*#__PURE__*/_jsxDEV(UserListView, {\n      isLoading: isLoading,\n      session: props.session,\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(UserDetailView, {\n      isLoading: isLoading,\n      session: props.session,\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n}\n_s(User, \"XgmaejmscVpCPaCEudRqHDq1T2E=\");\n_c = User;\nvar _c;\n$RefreshReg$(_c, \"User\");","map":{"version":3,"names":["React","useEffect","useState","UserListView","UserDetailView","axios","jsxDEV","_jsxDEV","User","props","_s","isLoading","setIsLoading","user","setUser","username","initialize","response","get","headers","session","authToken","data","status","Error","message","err","console","error","setTimeout","listView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/desmondoforiatta/Desktop/Medico/frontend/src/containers/users/user/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport UserListView from \"./views/listView\";\nimport UserDetailView from \"./views/detailView\";\nimport axios from 'axios';\n\n\nexport default function User(props) {\n    const [isLoading, setIsLoading] = useState(true);\n    const [user, setUser] = useState({});\n\n    // Initialize user by fetching information from server.\n    useEffect(() => {\n        const {username} = props;\n        async function initialize() {\n            try {\n                setIsLoading(true);\n                const response = await axios.get(`http://localhost:4090/api/users/${username}`, {\n                    headers: {\n                    'Authorization': `Bearer ${props.session.authToken}`\n                    }\n                });\n                // console.log(\"Res back\", response);\n                let data =  response.data;\n                if (response.status !== 200) {\n                    throw new Error(data.message);\n                }\n\n                setUser(data);\n            } catch (err) {\n                console.error(`Failed to get user information- ${props.username}. ${err}`);\n            } finally {\n                setTimeout(() => {\n                    setIsLoading(false);\n                }, 1000);\n            }\n        }\n\n        initialize();\n    }, [props.username, props.session.authToken]);\n\n\n    // Now render view.\n    if (props.listView) {\n        return (\n            <UserListView\n                isLoading={isLoading}\n                session={props.session}\n                user={user}\n            />\n        );\n    } else {\n        return (\n            <UserDetailView\n                isLoading={isLoading}\n                session={props.session}\n                user={user}\n            />\n        );\n    }\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,OAAOC,cAAc,MAAM,oBAAoB;AAC/C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,eAAe,SAASC,IAAIA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEpC;EACAD,SAAS,CAAC,MAAM;IACZ,MAAM;MAACc;IAAQ,CAAC,GAAGN,KAAK;IACxB,eAAeO,UAAUA,CAAA,EAAG;MACxB,IAAI;QACAJ,YAAY,CAAC,IAAI,CAAC;QAClB,MAAMK,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAE,mCAAkCH,QAAS,EAAC,EAAE;UAC5EI,OAAO,EAAE;YACT,eAAe,EAAG,UAASV,KAAK,CAACW,OAAO,CAACC,SAAU;UACnD;QACJ,CAAC,CAAC;QACF;QACA,IAAIC,IAAI,GAAIL,QAAQ,CAACK,IAAI;QACzB,IAAIL,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;UACzB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC;QACjC;QAEAX,OAAO,CAACQ,IAAI,CAAC;MACjB,CAAC,CAAC,OAAOI,GAAG,EAAE;QACVC,OAAO,CAACC,KAAK,CAAE,mCAAkCnB,KAAK,CAACM,QAAS,KAAIW,GAAI,EAAC,CAAC;MAC9E,CAAC,SAAS;QACNG,UAAU,CAAC,MAAM;UACbjB,YAAY,CAAC,KAAK,CAAC;QACvB,CAAC,EAAE,IAAI,CAAC;MACZ;IACJ;IAEAI,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,CAACP,KAAK,CAACM,QAAQ,EAAEN,KAAK,CAACW,OAAO,CAACC,SAAS,CAAC,CAAC;;EAG7C;EACA,IAAIZ,KAAK,CAACqB,QAAQ,EAAE;IAChB,oBACIvB,OAAA,CAACJ,YAAY;MACTQ,SAAS,EAAEA,SAAU;MACrBS,OAAO,EAAEX,KAAK,CAACW,OAAQ;MACvBP,IAAI,EAAEA;IAAK;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC;EAEV,CAAC,MAAM;IACH,oBACI3B,OAAA,CAACH,cAAc;MACXO,SAAS,EAAEA,SAAU;MACrBS,OAAO,EAAEX,KAAK,CAACW,OAAQ;MACvBP,IAAI,EAAEA;IAAK;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC;EAEV;AACJ;AAACxB,EAAA,CArDuBF,IAAI;AAAA2B,EAAA,GAAJ3B,IAAI;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}