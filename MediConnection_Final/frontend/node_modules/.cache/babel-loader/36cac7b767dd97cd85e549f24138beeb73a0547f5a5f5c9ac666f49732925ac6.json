{"ast":null,"code":"var _jsxFileName = \"/Users/desmondoforiatta/Desktop/Medico/frontend/src/containers/appointments/views/newAppointment/physicianSection.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { FormGroup, FormLabel } from '../../../../components/form';\nimport { List, ListButton } from '../../../../components/lists';\nimport { AutoLoader } from '../../../../components/loaders';\nimport { Username } from '../../../../components/users';\nimport { PhysicianItem } from './utils';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function PhysicianSection(props) {\n  _s();\n  const {\n    id,\n    name,\n    handleClick,\n    ...otherProps\n  } = props;\n  const [state, setState] = useState({\n    query: \"\",\n    physicians: [],\n    limit: 25\n  });\n  const getPhysicians = useCallback(async _ref => {\n    let {\n      search = '',\n      page = 0,\n      limit = 10\n    } = _ref;\n    try {\n      const url = `http://localhost:4090/api/users`;\n      const searchParams = new URLSearchParams();\n      searchParams.append('view', 'physician');\n      searchParams.append('search', search);\n      searchParams.append('page', page);\n      searchParams.append('limit', limit);\n      const response = await axios.get(`${url}?${searchParams.toString()}`, {\n        headers: {\n          'Authorization': `Bearer ${props.session.authToken}`\n        }\n      });\n      let newPhysicians = await response.data;\n      if (response.status !== 200) {\n        throw new Error(newPhysicians.message);\n      }\n      return newPhysicians;\n    } catch (err) {\n      throw err;\n    }\n  });\n  useEffect(() => {\n    async function load() {\n      try {\n        const newPhysicians = await getPhysicians({\n          search: state.query,\n          page: 0,\n          limit: state.limit\n        });\n        setState(prevState => {\n          return {\n            ...prevState,\n            physicians: [...newPhysicians]\n          };\n        });\n      } catch (err) {\n        // console.log(`Failed to load physicians based on search. ${err}`);\n      }\n    }\n    load();\n  }, [state.query, state.limit]);\n  async function appendPhysicians() {\n    try {\n      const newPhysicians = await getPhysicians({\n        search: state.query,\n        page: Math.ceil(state.physicians.length / state.limit),\n        limit: state.limit\n      });\n      setState(prevState => {\n        const updatedPhysicians = [...prevState.physicians, ...newPhysicians];\n        return {\n          ...prevState,\n          physicians: updatedPhysicians\n        };\n      });\n    } catch (err) {\n      console.error(`Failed to append to physician suggestions. ${err}`);\n    }\n  }\n  async function handleChange(e) {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value,\n      physicians: []\n    });\n  }\n  if (props.currentStep !== 1) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n        className: \"text-muted\",\n        children: \"Select a Physician\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: id,\n        type: \"text\",\n        className: \"form-control\",\n        name: \"query\",\n        value: state.query,\n        onChange: handleChange,\n        placeholder: \"Full Name or Username\",\n        ...otherProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), state.query.length > 0 && /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        className: \"md-list\",\n        children: state.physicians.map((physician, index) => /*#__PURE__*/_jsxDEV(ListButton, {\n          name: name,\n          value: Username({\n            user: physician\n          }),\n          handleClick: handleClick,\n          children: /*#__PURE__*/_jsxDEV(PhysicianItem, {\n            session: props.session,\n            user: physician,\n            clickable: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(AutoLoader, {\n        callback: appendPhysicians\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(PhysicianSection, \"5usAKL3kaE/n/0v5Xn1COkH03fM=\");\n_c = PhysicianSection;\nvar _c;\n$RefreshReg$(_c, \"PhysicianSection\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","FormGroup","FormLabel","List","ListButton","AutoLoader","Username","PhysicianItem","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","PhysicianSection","props","_s","id","name","handleClick","otherProps","state","setState","query","physicians","limit","getPhysicians","_ref","search","page","url","searchParams","URLSearchParams","append","response","get","toString","headers","session","authToken","newPhysicians","data","status","Error","message","err","load","prevState","appendPhysicians","Math","ceil","length","updatedPhysicians","console","error","handleChange","e","target","value","currentStep","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","map","physician","index","user","clickable","callback","_c","$RefreshReg$"],"sources":["/Users/desmondoforiatta/Desktop/Medico/frontend/src/containers/appointments/views/newAppointment/physicianSection.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { FormGroup, FormLabel } from '../../../../components/form';\nimport { List, ListButton } from '../../../../components/lists';\nimport { AutoLoader } from '../../../../components/loaders';\nimport { Username } from '../../../../components/users';\nimport { PhysicianItem } from './utils';\nimport axios from 'axios';\n\n\nexport default function PhysicianSection(props) {\n    const { id, name, handleClick, ...otherProps } = props;\n\n    const [state, setState] = useState({\n        query: \"\",\n        physicians: [],\n        limit: 25\n    });\n\n    const getPhysicians = useCallback( async({search='', page=0, limit=10}) => {\n        try {\n            const url = `http://localhost:4090/api/users`;\n            const searchParams = new URLSearchParams();\n            searchParams.append('view', 'physician');\n            searchParams.append('search', search);\n            searchParams.append('page', page);\n            searchParams.append('limit', limit);\n\n            const response = await axios.get(`${url}?${searchParams.toString()}`, {\n                headers: {\n                    'Authorization': `Bearer ${props.session.authToken}`\n                }\n            });\n\n            let newPhysicians = await response.data;\n            if (response.status !== 200) {\n                throw new Error(newPhysicians.message);\n            }\n\n            return newPhysicians;\n        } catch (err) {\n            throw(err);\n        }\n    })\n\n    useEffect(() => {\n        async function load() {\n            try {\n                const newPhysicians = await getPhysicians({\n                    search: state.query,\n                    page: 0,\n                    limit: state.limit\n                });\n\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        physicians: [...newPhysicians]\n                    }\n                });\n            } catch (err) {\n                // console.log(`Failed to load physicians based on search. ${err}`);\n            }\n        }\n\n        load();\n    }, [state.query, state.limit]);\n\n    async function appendPhysicians() {\n        try {\n            const newPhysicians = await getPhysicians({\n                search: state.query,\n                page: Math.ceil(state.physicians.length / state.limit),\n                limit: state.limit\n            });\n\n            setState(prevState => {\n                const updatedPhysicians = [...prevState.physicians, ...newPhysicians];\n                return {\n                    ...prevState,\n                    physicians: updatedPhysicians\n                }\n            });\n        } catch (err) {\n            console.error(`Failed to append to physician suggestions. ${err}`);\n        }\n    }\n\n    async function handleChange(e) {\n        setState({\n            ...state,\n            [e.target.name]: e.target.value,\n            physicians: []\n        });\n    }\n\n    if (props.currentStep !== 1) {\n        return null;\n    }\n\n    return (\n        <>\n            <FormGroup>\n                <FormLabel className=\"text-muted\">Select a Physician</FormLabel>\n                <input id={id} type=\"text\" className=\"form-control\"\n                    name=\"query\" value={state.query} onChange={handleChange}\n                        placeholder=\"Full Name or Username\" {...otherProps} />\n            </FormGroup>\n            {(state.query.length > 0) &&\n                <FormGroup>\n                    <List className=\"md-list\">\n                        {state.physicians.map((physician, index) => (\n                            <ListButton\n                                key={index}\n                                name={name}\n                                value={Username({ user: physician })}\n                                handleClick={handleClick}\n                            >\n                                <PhysicianItem\n                                    session={props.session}\n                                    user={physician} \n                                    clickable={true}\n                                />\n                            </ListButton>\n                        ))}\n                    </List>\n                    <AutoLoader callback={appendPhysicians} />\n                </FormGroup>\n            }\n        </>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}