{"ast":null,"code":"var _jsxFileName = \"/Users/ray/Desktop/Medico/frontend/src/containers/appointments/views/newAppointment/physicianSection.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { FormGroup, FormLabel } from \"../../../../components/form\";\nimport { List, ListButton } from \"../../../../components/lists\";\nimport { AutoLoader } from \"../../../../components/loaders\";\nimport { Username } from \"../../../../components/users\";\nimport { PhysicianItem } from \"./utils\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function PhysicianSection(props) {\n  _s();\n  const {\n    id,\n    name,\n    handleClick,\n    ...otherProps\n  } = props;\n  const [state, setState] = useState({\n    query: \"\",\n    physicians: [],\n    limit: 25\n  });\n  const getPhysicians = useCallback(async _ref => {\n    let {\n      search = \"\",\n      page = 0,\n      limit = 10\n    } = _ref;\n    try {\n      const url = `http://10.225.77.149:4090/api/users`;\n      const searchParams = new URLSearchParams();\n      searchParams.append(\"view\", \"physician\");\n      searchParams.append(\"search\", search);\n      searchParams.append(\"page\", page);\n      searchParams.append(\"limit\", limit);\n      const response = await axios.get(`${url}?${searchParams.toString()}`, {\n        headers: {\n          Authorization: `Bearer ${props.session.authToken}`\n        }\n      });\n      let newPhysicians = await response.data;\n      if (response.status !== 200) {\n        throw new Error(newPhysicians.message);\n      }\n      return newPhysicians;\n    } catch (err) {\n      throw err;\n    }\n  });\n  useEffect(() => {\n    async function load() {\n      try {\n        const newPhysicians = await getPhysicians({\n          search: state.query,\n          page: 0,\n          limit: state.limit\n        });\n        setState(prevState => {\n          return {\n            ...prevState,\n            physicians: [...newPhysicians]\n          };\n        });\n      } catch (err) {\n        // console.log(`Failed to load physicians based on search. ${err}`);\n      }\n    }\n    load();\n  }, [state.query, state.limit]);\n  async function appendPhysicians() {\n    try {\n      const newPhysicians = await getPhysicians({\n        search: state.query,\n        page: Math.ceil(state.physicians.length / state.limit),\n        limit: state.limit\n      });\n      setState(prevState => {\n        const updatedPhysicians = [...prevState.physicians, ...newPhysicians];\n        return {\n          ...prevState,\n          physicians: updatedPhysicians\n        };\n      });\n    } catch (err) {\n      console.error(`Failed to append to physician suggestions. ${err}`);\n    }\n  }\n  async function handleChange(e) {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value,\n      physicians: []\n    });\n  }\n  if (props.currentStep !== 1) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n        className: \"text-muted\",\n        children: \"Select a Physician\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: id,\n        type: \"text\",\n        className: \"form-control\",\n        name: \"query\",\n        value: state.query,\n        onChange: handleChange,\n        placeholder: \"Full Name or Username\",\n        ...otherProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), state.query.length > 0 && /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        className: \"md-list\",\n        children: state.physicians.map((physician, index) => /*#__PURE__*/_jsxDEV(ListButton, {\n          name: name,\n          value: Username({\n            user: physician\n          }),\n          handleClick: handleClick,\n          children: /*#__PURE__*/_jsxDEV(PhysicianItem, {\n            session: props.session,\n            user: physician,\n            clickable: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AutoLoader, {\n        callback: appendPhysicians\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(PhysicianSection, \"ckHF98vDYuA/AGfnXZAOninzoo8=\");\n_c = PhysicianSection;\nvar _c;\n$RefreshReg$(_c, \"PhysicianSection\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","FormGroup","FormLabel","List","ListButton","AutoLoader","Username","PhysicianItem","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","PhysicianSection","props","_s","id","name","handleClick","otherProps","state","setState","query","physicians","limit","getPhysicians","_ref","search","page","url","searchParams","URLSearchParams","append","response","get","toString","headers","Authorization","session","authToken","newPhysicians","data","status","Error","message","err","load","prevState","appendPhysicians","Math","ceil","length","updatedPhysicians","console","error","handleChange","e","target","value","currentStep","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","map","physician","index","user","clickable","callback","_c","$RefreshReg$"],"sources":["/Users/ray/Desktop/Medico/frontend/src/containers/appointments/views/newAppointment/physicianSection.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { FormGroup, FormLabel } from \"../../../../components/form\";\nimport { List, ListButton } from \"../../../../components/lists\";\nimport { AutoLoader } from \"../../../../components/loaders\";\nimport { Username } from \"../../../../components/users\";\nimport { PhysicianItem } from \"./utils\";\nimport axios from \"axios\";\n\nexport default function PhysicianSection(props) {\n  const { id, name, handleClick, ...otherProps } = props;\n\n  const [state, setState] = useState({\n    query: \"\",\n    physicians: [],\n    limit: 25,\n  });\n\n  const getPhysicians = useCallback(\n    async ({ search = \"\", page = 0, limit = 10 }) => {\n      try {\n        const url = `http://10.225.77.149:4090/api/users`;\n        const searchParams = new URLSearchParams();\n        searchParams.append(\"view\", \"physician\");\n        searchParams.append(\"search\", search);\n        searchParams.append(\"page\", page);\n        searchParams.append(\"limit\", limit);\n\n        const response = await axios.get(`${url}?${searchParams.toString()}`, {\n          headers: {\n            Authorization: `Bearer ${props.session.authToken}`,\n          },\n        });\n\n        let newPhysicians = await response.data;\n        if (response.status !== 200) {\n          throw new Error(newPhysicians.message);\n        }\n\n        return newPhysicians;\n      } catch (err) {\n        throw err;\n      }\n    }\n  );\n\n  useEffect(() => {\n    async function load() {\n      try {\n        const newPhysicians = await getPhysicians({\n          search: state.query,\n          page: 0,\n          limit: state.limit,\n        });\n\n        setState((prevState) => {\n          return {\n            ...prevState,\n            physicians: [...newPhysicians],\n          };\n        });\n      } catch (err) {\n        // console.log(`Failed to load physicians based on search. ${err}`);\n      }\n    }\n\n    load();\n  }, [state.query, state.limit]);\n\n  async function appendPhysicians() {\n    try {\n      const newPhysicians = await getPhysicians({\n        search: state.query,\n        page: Math.ceil(state.physicians.length / state.limit),\n        limit: state.limit,\n      });\n\n      setState((prevState) => {\n        const updatedPhysicians = [...prevState.physicians, ...newPhysicians];\n        return {\n          ...prevState,\n          physicians: updatedPhysicians,\n        };\n      });\n    } catch (err) {\n      console.error(`Failed to append to physician suggestions. ${err}`);\n    }\n  }\n\n  async function handleChange(e) {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value,\n      physicians: [],\n    });\n  }\n\n  if (props.currentStep !== 1) {\n    return null;\n  }\n\n  return (\n    <>\n      <FormGroup>\n        <FormLabel className='text-muted'>Select a Physician</FormLabel>\n        <input\n          id={id}\n          type='text'\n          className='form-control'\n          name='query'\n          value={state.query}\n          onChange={handleChange}\n          placeholder='Full Name or Username'\n          {...otherProps}\n        />\n      </FormGroup>\n      {state.query.length > 0 && (\n        <FormGroup>\n          <List className='md-list'>\n            {state.physicians.map((physician, index) => (\n              <ListButton\n                key={index}\n                name={name}\n                value={Username({ user: physician })}\n                handleClick={handleClick}>\n                <PhysicianItem\n                  session={props.session}\n                  user={physician}\n                  clickable={true}\n                />\n              </ListButton>\n            ))}\n          </List>\n          <AutoLoader callback={appendPhysicians} />\n        </FormGroup>\n      )}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}